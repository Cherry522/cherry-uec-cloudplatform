<?xml version="1.0"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>cherry-uec-cloudplatform</groupId>
    <artifactId>cherry-uec-cloudplatform</artifactId>
    <version>0.0.1-SNAPSHOT</version>
  </parent>
  <artifactId>cherry-springmvc-demo</artifactId>
  <packaging>war</packaging>
  <name>cherry-springmvc-demo Maven Webapp</name>
  <url>http://maven.apache.org</url>
  <dependencies>
<!--     <dependency> -->
<!--       <groupId>junit</groupId> -->
<!--       <artifactId>junit</artifactId> -->
<!--       <version>3.8.1</version> -->
<!--       <scope>test</scope> -->
<!--     </dependency> -->
    
    <!-- spring-context:包含spring-context/spring-aop/aopalliance-1.0/spring-beans/spring-core/commons-logging-1.2/spring-expression -->
<!--     <dependency> -->
<!--         <groupId>org.springframework</groupId> -->
<!--         <artifactId>spring-context</artifactId> -->
<!--         <version>${spring.version}</version> -->
<!--     </dependency> -->
	
	<!-- 
		spring-context-support(在spring2.0中由spring-support改名而来，这个jar文件包含支持缓存Cache(ehcache)、JCA、JMX、邮件服务(Java Mail、COS Mail)、任务计划Scheduling(Timer、Quartz)方面的类),依赖：
		spring-context包
	-->
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-context-support</artifactId>
		<version>${spring.version}</version>
	</dependency>
	
    <!-- spring-web:依赖 spring-context-->
<!--    	<dependency> -->
<!-- 		<groupId>org.springframework</groupId> -->
<!-- 		<artifactId>spring-web</artifactId> -->
<!-- 		<version>${spring.version}</version> -->
<!-- 	</dependency> -->

	<!-- spring-webmvc:依赖spring-web-->
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-webmvc</artifactId>
		<version>${spring.version}</version>
	</dependency>
	
	<!-- spring-test:依赖spring-core、commons-logging-1.2 -->
<!-- 	<dependency> -->
<!-- 		<groupId>org.springframework</groupId> -->
<!-- 		<artifactId>spring-test</artifactId> -->
<!-- 		<version>${spring.version}</version> -->
<!-- 	</dependency> -->

	<!-- spring-orm(提供了流行的对象关系型映射API集，如JPA，JDO，Hibernate。),依赖:
		spring-beans,
		spring-core,
		commons-logging-1.2,
		spring-jdbc,
		spring-tx -->
<!-- 	<dependency> -->
<!-- 		<groupId>org.springframework</groupId> -->
<!-- 		<artifactId>spring-orm</artifactId> -->
<!-- 		<version>${spring.version}</version> -->
<!-- 	</dependency> -->

	<!-- 
		spring-jms(包含了生产和消费消息的功能),依赖:
		spring-aop,
		spring-context,
		spring-messaging(包含spring的消息处理功能，如Message，MessageChannel，MessageHandler),
		spring-tx(支持编程和声明式事务管理类) 
	-->
<!-- 	<dependency> -->
<!-- 		<groupId>org.springframework</groupId> -->
<!-- 		<artifactId>spring-jms</artifactId> -->
<!-- 		<version>${spring.version}</version> -->
<!-- 	</dependency> -->
	<!-- spring-data-jpa,依赖：
		spring-data-commons,
			spring-orm,
			spring-jdbc
			spring-context,
			spring-tx
			aspectjrt(支持AOP的包),
			slf4j-api(日志的接口),
			jcl-over-slf4j(桥接器,把他们的日志输出重定向到 SLF4J，所谓的桥接器就是一个假的日志实现工具，比如当你把 jcl-over-slf4j.jar 放到 CLASS_PATH 时，即使某个组件原本是通过 JCL 输出日志的，现在却会被 jcl-over-slf4j “骗到”SLF4J 里，然后 SLF4J 又会根据绑定器把日志交给具体的日志实现工具)
	 -->
<!--     <dependency> -->
<!-- 		<groupId>org.springframework.data</groupId> -->
<!-- 		<artifactId>spring-data-jpa</artifactId> -->
<!-- 		<version>1.9.1.RELEASE</version> -->
<!-- 	</dependency> -->

	
  </dependencies>
  <build>
    <finalName>cherry-springmvc-demo</finalName>
  </build>
</project>
